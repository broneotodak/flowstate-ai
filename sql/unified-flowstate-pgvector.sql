-- Unified FlowState + PGVector Memory System
-- This creates a single source of truth using context_embeddings

-- Step 1: Add activity data to context_embeddings
-- We'll use type='activity' for all FlowState activities
INSERT INTO context_embeddings (type, name, parent_name, metadata, embedding, created_at)
SELECT 
    'activity' as type,
    CONCAT(activity_type, '_', TO_CHAR(created_at, 'YYYY-MM-DD_HH24:MI:SS')) as name,
    project_name as parent_name,
    jsonb_build_object(
        'activity_id', id,
        'user_id', user_id,
        'activity_type', activity_type,
        'activity_description', activity_description,
        'machine', COALESCE(metadata->>'machine', 'Unknown'),
        'source', COALESCE(metadata->>'source', 'Unknown'),
        'tool', COALESCE(metadata->>'tool', 'Unknown'),
        'original_metadata', metadata,
        'importance', CASE 
            WHEN activity_type IN ('milestone', 'solution') THEN 'high'
            WHEN activity_type IN ('debugging', 'maintenance') THEN 'medium'
            ELSE 'normal'
        END
    ) as metadata,
    NULL as embedding, -- Will be generated later
    created_at
FROM activity_log
WHERE NOT EXISTS (
    SELECT 1 FROM context_embeddings ce 
    WHERE ce.type = 'activity' 
    AND ce.metadata->>'activity_id' = activity_log.id::text
);

-- Step 2: Create a view for FlowState dashboard
CREATE OR REPLACE VIEW flowstate_activities AS
SELECT 
    id,
    metadata->>'user_id' as user_id,
    parent_name as project_name,
    metadata->>'activity_type' as activity_type,
    metadata->>'activity_description' as activity_description,
    jsonb_build_object(
        'machine', metadata->>'machine',
        'source', metadata->>'source',
        'tool', metadata->>'tool',
        'importance', metadata->>'importance'
    ) as metadata,
    created_at,
    updated_at,
    CASE WHEN embedding IS NOT NULL THEN true ELSE false END as has_embedding
FROM context_embeddings
WHERE type = 'activity'
ORDER BY created_at DESC;

-- Step 3: Create a view for current context
CREATE OR REPLACE VIEW flowstate_current_context AS
SELECT DISTINCT ON (parent_name)
    parent_name as project_name,
    metadata->>'activity_description' as current_task,
    metadata->>'activity_type' as current_phase,
    created_at as last_updated,
    metadata->>'machine' as active_machine
FROM context_embeddings
WHERE type = 'activity'
AND created_at > NOW() - INTERVAL '24 hours'
ORDER BY parent_name, created_at DESC;

-- Step 4: Create a view for machines
CREATE OR REPLACE VIEW flowstate_machines AS
SELECT DISTINCT
    metadata->>'machine' as machine_name,
    parent_name as last_project,
    MAX(created_at) as last_active,
    COUNT(*) as activity_count
FROM context_embeddings
WHERE type = 'activity'
AND metadata->>'machine' IS NOT NULL
GROUP BY metadata->>'machine', parent_name
ORDER BY MAX(created_at) DESC;

-- Step 5: Create a function to log activities directly to context_embeddings
CREATE OR REPLACE FUNCTION log_activity_unified(
    p_user_id TEXT,
    p_project_name TEXT,
    p_activity_type TEXT,
    p_activity_description TEXT,
    p_machine TEXT DEFAULT 'Unknown',
    p_source TEXT DEFAULT 'Unknown',
    p_tool TEXT DEFAULT 'Unknown',
    p_importance TEXT DEFAULT 'normal',
    p_additional_metadata JSONB DEFAULT '{}'::JSONB
)
RETURNS SETOF context_embeddings
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    RETURN QUERY
    INSERT INTO context_embeddings (
        type,
        name,
        parent_name,
        metadata,
        embedding,
        created_at,
        updated_at
    ) VALUES (
        'activity',
        CONCAT(p_activity_type, '_', TO_CHAR(NOW(), 'YYYY-MM-DD_HH24:MI:SS')),
        p_project_name,
        jsonb_build_object(
            'user_id', p_user_id,
            'activity_type', p_activity_type,
            'activity_description', p_activity_description,
            'machine', p_machine,
            'source', p_source,
            'tool', p_tool,
            'importance', p_importance
        ) || p_additional_metadata,
        NULL, -- Embedding will be generated by edge function
        NOW(),
        NOW()
    )
    RETURNING *;
END;
$$;

-- Step 6: Test the new unified system
SELECT * FROM log_activity_unified(
    'neo_todak',
    'kenal-admin',
    'development',
    'Working on admin panel with unified FlowState memory',
    'Office PC',
    'Cursor',
    'Cursor AI',
    'high',
    '{"version": "2.0", "unified": true}'::JSONB
);

-- Step 7: Show recent activities from the view
SELECT 
    project_name,
    activity_type,
    activity_description,
    metadata->>'machine' as machine,
    created_at
FROM flowstate_activities
WHERE created_at > NOW() - INTERVAL '1 day'
ORDER BY created_at DESC
LIMIT 10;

-- Step 8: Update dashboard to use the new views
-- The dashboard should now query:
-- - flowstate_activities instead of activity_log
-- - flowstate_current_context instead of current_context
-- - flowstate_machines instead of user_machines

-- Step 9: Grant permissions
GRANT SELECT ON flowstate_activities TO anon, authenticated, service_role;
GRANT SELECT ON flowstate_current_context TO anon, authenticated, service_role;
GRANT SELECT ON flowstate_machines TO anon, authenticated, service_role;
GRANT EXECUTE ON FUNCTION log_activity_unified TO anon, authenticated, service_role;